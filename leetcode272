class MedianFinder {
    // 最小堆存储较大的部分数据
    PriorityQueue<Integer> minHeap = new PriorityQueue<Integer>();
    // 最大堆存储较小的部分数据
    PriorityQueue<Integer> maxHeap = new PriorityQueue<Integer>(11,new Comparator<Integer>(){ //大顶堆，容量11
        @Override
        public int compare(Integer i1,Integer i2){
            return i2-i1;
        }
    });
    /** initialize your data structure here. */
    public MedianFinder() {
        
    }
    
    public void addNum(int num) {
        // 输入第一个数，若两个队列都空，则插入数据到最大堆
            if(maxHeap.size() == 0){
                maxHeap.offer(num);
                return;
            }
            if(maxHeap.size() == minHeap.size()){
                if(num < maxHeap.peek()){
                    maxHeap.offer(num);
                }else{
                    minHeap.offer(num);
                }
            }else if(maxHeap.size() >minHeap.size()){
                if(num > maxHeap.peek()){
                    minHeap.offer(num);
                }else{
                    minHeap.offer(maxHeap.poll());
                    maxHeap.offer(num);
                }
            }else if(maxHeap.size() < minHeap.size()){
                if(num < minHeap.peek()){
                    maxHeap.offer(num);
                }else{
                    maxHeap.offer(minHeap.poll());
                    minHeap.offer(num);
                }                
            }

    }
    public double findMedian() {
        double return;
        if(maxHeap.size() == minHeap.size()){
            result = (maxHeap.peek() +minHeap.peek())/2;
        }else if(maxHeap.size() == minHeap.size()){
            result = minHeap.peek();
        }else{
	   result = maxHeap.peek();
	}
        return result;
    }
}

/**
 * Your MedianFinder object will be instantiated and called as such:
 * MedianFinder obj = new MedianFinder();
 * obj.addNum(num);
 * double param_2 = obj.findMedian();
 */
